{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["layout","labelCol","span","wrapperCol","Header","Layout","Content","Footer","Sider","App","props","handleOk","key","setState","confirmLoading","soundUrl","Audio","process","play","setTimeout","visible","handleCancel","e","console","log","state","bind","this","title","onOk","onCancel","name","initialValues","remember","Item","label","rules","required","message","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","type","onClick","value","theme","mode","defaultSelectedKeys","icon","HomeFilled","to","style","textDecoration","EnvironmentFilled","InfoCircleFilled","className","padding","color","fontSize","margin","minHeight","textAlign","backgroundColor","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3fec76b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Layout, Menu } from \"antd\";\nimport {\n  EnvironmentFilled,\n  HomeFilled,\n  InfoCircleFilled,\n} from \"@ant-design/icons\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Form, Input, Button, Checkbox, Modal } from \"antd\";\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\nconst { Header, Content, Footer, Sider } = Layout;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      confirmLoading: false,\n    };\n    this.handleOk = this.handleOk.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n  }\n\n  handleOk = (key) => {\n    this.setState({\n      confirmLoading: true,\n    });\n    let soundUrl = \"\";\n    if (key == 1) soundUrl = \"/sounds/tu1.m4a\";\n    else if (key == 2) soundUrl = \"/sounds/tu2.m4a\";\n    else if (key == 3) soundUrl = \"/sounds/tu3.m4a\";\n    else soundUrl = \"/sounds/tu4.m4a\";\n    let audio = new Audio(process.env.PUBLIC_URL + soundUrl);\n    audio.play();\n    // audio.onended = function () {\n    //   setTimeout(() => {\n    //     this.setState({\n    //       visible: false,\n    //       confirmLoading: false,\n    //     });\n    //   }, 2000);\n    // }.bind(this);\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 3000);\n  };\n  componentDidMount() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        {this.state.visible ? (\n          <div>\n            <Modal\n              title=\"Basic Modal\"\n              visible={this.state.visible}\n              confirmLoading={this.state.confirmLoading}\n              onOk={()=>this.handleOk(4)}\n              onCancel={this.handleCancel}\n            >\n              <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                // onFinish={onFinish}\n                // onFinishFailed={onFinishFailed}\n              >\n                <Form.Item\n                  label=\"ชื่อผู้ใช้งาน\"\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"กรุณากรอกชื่อผู้ใช้งาน\" },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n\n                {/* <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n\n                <Form.Item\n                  {...tailLayout}\n                  name=\"remember\"\n                  valuePropName=\"checked\"\n                >\n                  <Checkbox>Remember me</Checkbox>\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                  </Button>\n                </Form.Item> */}\n              </Form>\n            </Modal>\n          </div>\n        ) : null}\n        <Layout>\n          <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            onBreakpoint={(broken) => {\n              console.log(broken);\n            }}\n            onCollapse={(collapsed, type) => {\n              console.log(collapsed, type);\n            }}\n          >\n            <Menu onClick={(value) => this.handleOk(value.key)} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n              <Menu.Item key=\"1\" icon={<HomeFilled />}>\n                <Link\n                  to=\"https://kasettakorn.github.io/guideline-webtour/\"\n                  style={{ textDecoration: \"none\" }}\n                >\n                  หน้าหลัก\n                </Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\" icon={<EnvironmentFilled />}>\n                <Link\n                  to=\"https://kasettakorn.github.io/guideline-webtour/politics\"\n                  style={{ textDecoration: \"none\" }}\n                >\n                  ข่าวการเมือง\n                </Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\" icon={<InfoCircleFilled />}>\n                <Link\n                  to=\"https://kasettakorn.github.io/guideline-webtour/economics\"\n                  style={{ textDecoration: \"none\" }}\n                >\n                  เศรษฐกิจ\n                </Link>\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Layout>\n            <Header\n              className=\"site-layout-sub-header-background\"\n              style={{ padding: 0, color: \"white\", fontSize: 18 }}\n            ></Header>\n            <Content style={{ margin: \"24px 16px 0\" }}>\n              <div\n                className=\"site-layout-background\"\n                style={{ padding: 24, minHeight: 600 }}\n              ></div>\n            </Content>\n            <Footer style={{ textAlign: \"center\", backgroundColor: \"white\" }}>\n              Icons made by{\" \"}\n              <a\n                href=\"https://www.flaticon.com/authors/freepik\"\n                title=\"Freepik\"\n              >\n                Freepik\n              </a>{\" \"}\n              from{\" \"}\n              <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n                {\" \"}\n                www.flaticon.com\n              </a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}